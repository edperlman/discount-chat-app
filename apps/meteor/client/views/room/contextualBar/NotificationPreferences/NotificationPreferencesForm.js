"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const fuselage_1 = require("@rocket.chat/fuselage");
const react_1 = __importDefault(require("react"));
const react_hook_form_1 = require("react-hook-form");
const react_i18next_1 = require("react-i18next");
const NotificationByDevice_1 = __importDefault(require("./components/NotificationByDevice"));
const NotificationPreference_1 = __importDefault(require("./components/NotificationPreference"));
const NotificationToggle_1 = __importDefault(require("./components/NotificationToggle"));
const NotificationPreferencesForm = ({ notificationOptions, handlePlaySound }) => {
    const { t } = (0, react_i18next_1.useTranslation)();
    const { watch, control } = (0, react_hook_form_1.useFormContext)();
    const { showCounter } = watch();
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(react_hook_form_1.Controller, { control: control, name: 'turnOn', render: ({ field: { value, onChange } }) => ((0, jsx_runtime_1.jsx)(NotificationToggle_1.default, { label: t('Turn_ON'), description: t('Receive_alerts'), onChange: onChange, defaultChecked: value })) }), (0, jsx_runtime_1.jsx)(react_hook_form_1.Controller, { control: control, name: 'muteGroupMentions', render: ({ field: { value, onChange } }) => ((0, jsx_runtime_1.jsx)(NotificationToggle_1.default, { label: t('Mute_Group_Mentions'), onChange: onChange, defaultChecked: value })) }), (0, jsx_runtime_1.jsx)(react_hook_form_1.Controller, { control: control, name: 'showCounter', render: ({ field: { value, onChange } }) => ((0, jsx_runtime_1.jsx)(NotificationToggle_1.default, { label: t('Show_counter'), description: t('Display_unread_counter'), onChange: onChange, defaultChecked: value })) }), !showCounter && ((0, jsx_runtime_1.jsx)(react_hook_form_1.Controller, { control: control, name: 'showMentions', render: ({ field: { value, onChange } }) => ((0, jsx_runtime_1.jsx)(NotificationToggle_1.default, { label: t('Show_mentions'), description: t('Display_mentions_counter'), onChange: onChange, defaultChecked: value })) })), (0, jsx_runtime_1.jsxs)(fuselage_1.FieldGroup, { children: [(0, jsx_runtime_1.jsxs)(NotificationByDevice_1.default, { device: t('Desktop'), icon: 'desktop', children: [(0, jsx_runtime_1.jsx)(react_hook_form_1.Controller, { control: control, name: 'desktopAlert', render: ({ field: { value, onChange } }) => ((0, jsx_runtime_1.jsx)(NotificationPreference_1.default, { id: 'DesktopAlert', name: t('Alerts'), options: notificationOptions.alerts, optionValue: value, onChange: onChange })) }), (0, jsx_runtime_1.jsx)(fuselage_1.Margins, { blockStart: 16, children: (0, jsx_runtime_1.jsx)(react_hook_form_1.Controller, { control: control, name: 'desktopSound', render: ({ field: { value, onChange } }) => ((0, jsx_runtime_1.jsx)(NotificationPreference_1.default, { id: 'DesktopSound', name: t('Sound'), options: notificationOptions.sounds, optionValue: value, onChange: onChange, children: (0, jsx_runtime_1.jsx)(fuselage_1.IconButton, { icon: 'play', mis: 4, onClick: handlePlaySound }) })) }) })] }), (0, jsx_runtime_1.jsx)(NotificationByDevice_1.default, { device: t('Mobile'), icon: 'mobile', children: (0, jsx_runtime_1.jsx)(react_hook_form_1.Controller, { control: control, name: 'mobileAlert', render: ({ field: { value, onChange } }) => ((0, jsx_runtime_1.jsx)(NotificationPreference_1.default, { id: 'MobileAlert', name: t('Alerts'), options: notificationOptions.alerts, optionValue: value, onChange: onChange })) }) }), (0, jsx_runtime_1.jsx)(NotificationByDevice_1.default, { device: t('Email'), icon: 'mail', children: (0, jsx_runtime_1.jsx)(react_hook_form_1.Controller, { control: control, name: 'emailAlert', render: ({ field: { value, onChange } }) => ((0, jsx_runtime_1.jsx)(NotificationPreference_1.default, { id: 'EmailAlert', name: t('Alerts'), options: notificationOptions.alerts, optionValue: value, onChange: onChange })) }) })] })] }));
};
exports.default = NotificationPreferencesForm;
